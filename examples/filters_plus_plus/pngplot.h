/*
 * sst-filters - A header-only collection of SIMD filter
 * implementations by the Surge Synth Team
 *
 * Copyright 2019-2025, various authors, as described in the GitHub
 * transaction log.
 *
 * sst-filters is released under the Gnu General Public Licens
 * version 3 or later. Some of the filters in this package
 * originated in the version of Surge open sourced in 2018.
 *
 * All source in sst-filters available at
 * https://github.com/surge-synthesizer/sst-filters
 */

//
// Created by Paul Walker on 8/15/25.
//

#ifndef SSTFILTERS_EXAMPLES_FILTERS_PLUS_PLUS_PNGPLOT_H
#define SSTFILTERS_EXAMPLES_FILTERS_PLUS_PLUS_PNGPLOT_H

#include "stb_image_write.h"
#include <vector>

#include "sst/filters++.h"

#include <map>

struct PNGPlot
{
    static constexpr size_t w{500}, h{500}, ch{3};
    unsigned char data[w * h * ch];
    PNGPlot() { memset(data, 0xCC, sizeof(data)); }

    void save(const char *fn) { stbi_write_png(fn, w, h, ch, data, w * ch); }

    using curve_t = std::vector<std::pair<float, float>>;
    void add(const curve_t &points, int r = 0, int g = 0, int b = 0)
    {
        assert(!points.empty());
        std::optional<std::pair<float, float>> last;
        for (auto &n : points)
        {
            auto nf = toPixels(n);
            auto x = nf.first;
            auto y = nf.second;

            for (int dx = -1; dx <= 1; ++dx)
            {
                for (int dy = -1; dy <= 1; ++dy)
                {
                    setPx(x + dx, y + dy, r, g, b);
                }
            }
            if (last.has_value())
            {
                lineFromTo(last->first, nf.first, last->second, nf.second, r, g, b);
            }
            last = nf;
        }
    }

    void setPx(int x, int y, int r, int g, int b)
    {
        data[(x + y * h) * ch] = r;
        data[(x + y * h) * ch + 1] = g;
        data[(x + y * h) * ch + 2] = b;
    }
    void lineFromTo(int x0, int x1, int y0, int y1, int r, int g, int b)
    {
        // Compute gradient and convert to fixed-point step
        auto m = 1.f * (y1 - y0) / (x1 - x0);
        auto py = y0;
        for (int x = x0; x <= x1; ++x)
        {
            auto y = y0 + m * (x - x0);
            if (y != py)
            {
                auto sy = (int)y;
                auto ey = py;
                if (ey < sy)
                    std::swap(ey, sy);
                for (int yy = sy; yy < ey; ++yy)
                {
                    setPx(x, yy, r, g, b);
                }
            }
            py = y;
            setPx(x, y, r, g, b);
        }
    }

    std::pair<int, int> toPixels(const std::pair<float, float> &p)
    {
        auto xp = std::clamp((p.first - xMin) / (xMax - xMin) * (w - 8), 0.f, w - 8.f);
        auto yp = std::clamp(h - 8 - (p.second - yMin) / (yMax - yMin) * (h - 8), 0.f, h - 8.f);
        return {xp + 4, yp + 4};
    }

    void addTitle(const std::string &s)
    {
        auto x = 4;
        for (auto c : s)
        {
            c = std::toupper(c);
            auto q = std::string() + c;
            auto v = fontChar(q);
            if (v.empty())
            {
                x += 7;
                continue;
            }
            auto y = 4;
            for (auto l : v)
            {
                auto xp = x;
                for (auto c : l)
                {
                    if (c != '.')
                    {
                        setPx(xp, y, 0, 0, 0);
                    }
                    xp++;
                }
                y++;
            }
            x += 7;
        }
    }

    float xMin = 0, xMax = 127, yMin = -30, yMax = 12;

    std::vector<std::string> fontChar(std::string c)
    {
        /*
            The Keypunch font encoded here comes from
            [Stewart C. Russell's
           blog](http://scruss.com/blog/2017/03/21/keypunch029-for-all-your-punched-card-font-needs/).
            The font is Copyright 2017 Stewart C. Russell and is released under
            the [SIL Open Font
           License 1.1](http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL).
        */
        static std::map<std::string, std::vector<std::string>> font = {
            {"!", {"...#.", "...#.", "...#.", "...#.", "...#.", ".....", "...#."}},
            {"\"", {".#.#.", ".#.#.", ".#.#.", ".....", ".....", ".....", "....."}},
            {"#", {".#.#.", ".#.#.", "##.##", ".....", "##.##", ".#.#.", ".#.#."}},
            {"$", {"..#..", ".####", "#....", ".###.", "....#", "####.", "..#.."}},
            {"%", {"##..#", "##..#", "...#.", "..#..", ".#...", "#..##", "#..##"}},
            {"&", {".#...", "#.#..", "#.#..", ".#...", "#.#.#", "#..#.", ".##.#"}},
            {"'", {".##..", ".##..", ".##..", ".....", ".....", ".....", "....."}},
            {"(", {"...#.", "..#..", ".#...", ".#...", ".#...", "..#..", "...#."}},
            {")", {".#...", "..#..", "...#.", "...#.", "...#.", "..#..", ".#..."}},
            {"*", {"#.#.#", ".###.", "#####", ".###.", "#.#.#", ".....", "....."}},
            {"+", {".....", "..#..", "..#..", "#####", "..#..", "..#..", "....."}},
            {",", {".....", ".....", ".....", ".##..", ".##..", "..#..", ".#..."}},
            {"-", {".....", ".....", ".....", ".....", "#####", ".....", "....."}},
            {".", {".....", ".....", ".....", ".....", ".....", ".##..", ".##.."}},
            {"/", {".....", "....#", "...#.", "..#..", ".#...", "#....", "....."}},
            {"0", {"..##.", ".#..#", ".#..#", ".#..#", ".#..#", ".#..#", "..##."}},
            {"1", {"..#..", ".##..", "..#..", "..#..", "..#..", "..#..", ".###."}},
            {"2", {".###.", "#...#", "....#", ".###.", "#....", "#....", "#####"}},
            {"3", {".###.", "#...#", "....#", "..##.", "....#", "#...#", ".###."}},
            {"4", {"...#.", "..##.", ".#.#.", "#..#.", "#####", "...#.", "...#."}},
            {"5", {"#####", "#....", "####.", "....#", "....#", "#...#", ".###."}},
            {"6", {"..##.", ".#...", "#....", "####.", "#...#", "#...#", ".###."}},
            {"7", {"#####", "....#", "...#.", "..#..", ".#...", ".#...", ".#..."}},
            {"8", {".###.", "#...#", "#...#", ".###.", "#...#", "#...#", ".###."}},
            {"9", {".###.", "#...#", "#...#", ".####", "....#", "...#.", ".##.."}},
            {":", {".....", ".##..", ".##..", ".....", ".##..", ".##..", "....."}},
            {";", {".##..", ".##..", ".....", ".##..", ".##..", "..#..", ".#..."}},
            {"<", {"....#", "...#.", "..#..", ".#...", "..#..", "...#.", "....#"}},
            {"=", {".....", ".....", "#####", ".....", "#####", ".....", "....."}},
            {">", {"#....", ".#...", "..#..", "...#.", "..#..", ".#...", "#...."}},
            {"?", {".##..", "#..#.", "...#.", "..#..", "..#..", ".....", "..#.."}},
            {"@", {".###.", "#...#", "....#", ".##.#", "#.#.#", "#.#.#", ".###."}},
            {"A", {"..#..", ".#.#.", "#...#", "#...#", "#####", "#...#", "#...#"}},
            {"B", {"####.", ".#..#", ".#..#", ".###.", ".#..#", ".#..#", "####."}},
            {"C", {".###.", "#...#", "#....", "#....", "#....", "#...#", ".###."}},
            {"D", {"####.", ".#..#", ".#..#", ".#..#", ".#..#", ".#..#", "####."}},
            {"E", {"#####", "#....", "#....", "###..", "#....", "#....", "#####"}},
            {"F", {"#####", "#....", "#....", "###..", "#....", "#....", "#...."}},
            {"G", {".####", "#....", "#....", "#..##", "#...#", "#...#", ".####"}},
            {"H", {"#...#", "#...#", "#...#", "#####", "#...#", "#...#", "#...#"}},
            {"I", {".###.", "..#..", "..#..", "..#..", "..#..", "..#..", ".###."}},
            {"J", {"....#", "....#", "....#", "....#", "....#", "#...#", ".###."}},
            {"K", {"#...#", "#..#.", "#.#..", "##...", "#.#..", "#..#.", "#...#"}},
            {"L", {"#....", "#....", "#....", "#....", "#....", "#....", "#####"}},
            {"M", {"#...#", "##.##", "#.#.#", "#.#.#", "#...#", "#...#", "#...#"}},
            {"N", {"#...#", "##..#", "#.#.#", "#..##", "#...#", "#...#", "#...#"}},
            {"O", {"#####", "#...#", "#...#", "#...#", "#...#", "#...#", "#####"}},
            {"P", {"####.", "#...#", "#...#", "####.", "#....", "#....", "#...."}},
            {"Q", {".###.", "#...#", "#...#", "#...#", "#.#.#", "#..#.", ".##.#"}},
            {"R", {"####.", "#...#", "#...#", "####.", "#.#..", "#..#.", "#...#"}},
            {"S", {".###.", "#...#", ".#...", "..#..", "...#.", "#...#", ".###."}},
            {"T", {"#####", "..#..", "..#..", "..#..", "..#..", "..#..", "..#.."}},
            {"U", {"#...#", "#...#", "#...#", "#...#", "#...#", "#...#", ".###."}},
            {"V", {"#...#", "#...#", "#...#", ".#.#.", ".#.#.", "..#..", "..#.."}},
            {"W", {"#...#", "#...#", "#...#", "#...#", "#.#.#", "##.##", "#...#"}},
            {"X", {"#...#", "#...#", ".#.#.", "..#..", ".#.#.", "#...#", "#...#"}},
            {"Y", {"#...#", "#...#", ".#.#.", "..#..", "..#..", "..#..", "..#.."}},
            {"Z", {"#####", "....#", "...#.", "..#..", ".#...", "#....", "#####"}},
            {"\\", {".....", "#....", ".#...", "..#..", "...#.", "....#", "....."}},
            {"_", {".....", ".....", ".....", ".....", ".....", ".....", "#####"}},
            {"|", {".....", "..#..", "..#..", "..#..", "..#..", "..#..", "....."}},
            {"¢", {"..#..", ".###.", "#....", "#....", "#....", ".###.", "..#.."}},
            {"¬", {".....", ".....", ".....", ".....", "#####", "....#", "....#"}},
            {" ", {".....", ".....", ".....", ".....", ".....", ".....", "....."}},
            {"[", {"###..", "#....", "#....", "#....", "#....", "#....", "###.."}},
            {"]", {"..###", "....#", "....#", "....#", "....#", "....#", "..###"}},
            {"^", {"..#..", ".#.#.", "#...#", ".....", ".....", ".....", "....."}},
            {"`", {"#....", ".#...", "..#..", ".....", ".....", ".....", "....."}},
            {"{", {"..##.", ".#...", ".#...", "#....", ".#...", ".#...", "..##."}},
            {"}", {".##..", "...#.", "...#.", "....#", "...#.", "...#.", ".##.."}},
            {"~", {".....", ".....", ".#...", "#.#.#", "...#.", ".....", "....."}},
            {"€", {"..###", ".#...", "###..", ".#...", "###..", ".#...", "..###"}},
            {"£", {"..###", ".#...", ".#...", "###..", ".#...", ".#...", "#####"}},
            {"⌑", {"#...#", ".###.", ".#.#.", ".#.#.", ".#.#.", ".###.", "#...#"}}};

        auto f = font.find(c);
        if (f == font.end())
            return {};
        return f->second;
    }
};
#endif // PNGPLOT_H
